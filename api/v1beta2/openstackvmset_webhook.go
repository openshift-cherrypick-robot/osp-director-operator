/*


Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Generated by:
//
// operator-sdk create webhook --group osp-director --version v1beta2 --defaulting --programmatic-validation --kind OpenStackVMSet --force
//

package v1beta2

import (
	"fmt"

	"github.com/openstack-k8s-operators/osp-director-operator/api/shared"
	"k8s.io/apimachinery/pkg/api/equality"
	"k8s.io/apimachinery/pkg/runtime"
	ctrl "sigs.k8s.io/controller-runtime"
	logf "sigs.k8s.io/controller-runtime/pkg/log"
	"sigs.k8s.io/controller-runtime/pkg/webhook"

	ospdirectorv1beta1 "github.com/openstack-k8s-operators/osp-director-operator/api/v1beta1"
)

// log is for logging in this package.
var vmsetlog = logf.Log.WithName("vmset-resource")

// SetupWebhookWithManager - register this webhook with the controller manager
func (r *OpenStackVMSet) SetupWebhookWithManager(mgr ctrl.Manager) error {
	if webhookClient == nil {
		webhookClient = mgr.GetClient()
	}

	return ctrl.NewWebhookManagedBy(mgr).
		For(r).
		Complete()
}

//+kubebuilder:webhook:path=/mutate-osp-director-openstack-org-v1beta2-openstackvmset,mutating=true,failurePolicy=fail,sideEffects=None,groups=osp-director.openstack.org,resources=openstackvmsets,verbs=create;update,versions=v1beta1;v1beta2,name=mopenstackvmset.kb.io,admissionReviewVersions=v1

var _ webhook.Defaulter = &OpenStackVMSet{}

// Default implements webhook.Defaulter so a webhook will be registered for the type
func (r *OpenStackVMSet) Default() {
	vmsetlog.Info("default", "name", r.Name)

	//
	// set OpenStackNetConfig reference label if not already there
	// Note, any rename of the osnetcfg won't be reflected
	//
	if _, ok := r.GetLabels()[shared.OpenStackNetConfigReconcileLabel]; !ok {
		labels, err := ospdirectorv1beta1.AddOSNetConfigRefLabel(
			webhookClient,
			r.Namespace,
			r.Spec.Networks[0],
			r.DeepCopy().GetLabels(),
		)
		if err != nil {
			vmsetlog.Error(err, fmt.Sprintf("error adding OpenStackNetConfig reference label on %s - %s: %s", r.Kind, r.Name, err))
		}

		r.SetLabels(labels)
		vmsetlog.Info(fmt.Sprintf("%s %s labels set to %v", r.GetObjectKind().GroupVersionKind().Kind, r.Name, r.GetLabels()))
	}

	//
	// add labels of all networks used by this CR
	//
	labels := ospdirectorv1beta1.AddOSNetNameLowerLabels(
		vmsetlog,
		r.DeepCopy().GetLabels(),
		r.Spec.Networks,
	)
	if !equality.Semantic.DeepEqual(
		labels,
		r.GetLabels(),
	) {
		r.SetLabels(labels)
		vmsetlog.Info(fmt.Sprintf("%s %s labels set to %v", r.GetObjectKind().GroupVersionKind().Kind, r.Name, r.GetLabels()))
	}

	//
	// set spec.domainName , dnsSearchDomains and bootstrapDNS from osnetcfg if not specified
	//
	osNetCfg, err := ospdirectorv1beta1.GetOsNetCfg(webhookClient, r.GetNamespace(), r.GetLabels()[shared.OpenStackNetConfigReconcileLabel])
	if err != nil {
		vmsetlog.Error(err, fmt.Sprintf("error getting OpenStackNetConfig %s - %s: %s",
			r.GetLabels()[shared.OpenStackNetConfigReconcileLabel],
			r.Name,
			err))
	}

	if osNetCfg != nil {
		if len(r.Spec.DNSSearchDomains) == 0 && len(osNetCfg.Spec.DNSSearchDomains) > 0 {
			r.Spec.DNSSearchDomains = osNetCfg.Spec.DNSSearchDomains
			vmsetlog.Info(fmt.Sprintf("Using DNSSearchDomains from %s %s: %v", osNetCfg.GetObjectKind().GroupVersionKind().Kind, osNetCfg.Name, r.Spec.DNSSearchDomains))
		}
		if len(r.Spec.BootstrapDNS) == 0 && len(osNetCfg.Spec.DNSServers) > 0 {
			r.Spec.BootstrapDNS = osNetCfg.Spec.DNSServers
			vmsetlog.Info(fmt.Sprintf("Using BootstrapDNS from %s %s: %v", osNetCfg.GetObjectKind().GroupVersionKind().Kind, osNetCfg.Name, r.Spec.BootstrapDNS))
		}
	}

}

//+kubebuilder:webhook:path=/validate-osp-director-openstack-org-v1beta2-openstackvmset,mutating=false,failurePolicy=fail,sideEffects=None,groups=osp-director.openstack.org,resources=openstackvmsets,verbs=create;update;delete,versions=v1beta1;v1beta2,name=vopenstackvmset.kb.io,admissionReviewVersions=v1

var _ webhook.Validator = &OpenStackVMSet{}

// ValidateCreate implements webhook.Validator so a webhook will be registered for the type
func (r *OpenStackVMSet) ValidateCreate() error {
	vmsetlog.Info("validate create", "name", r.Name)

	if err := ospdirectorv1beta1.CheckBackupOperationBlocksAction(r.Namespace, shared.APIActionCreate); err != nil {
		return err
	}

	//
	// Fail early on create if osnetcfg ist not found
	//
	_, err := ospdirectorv1beta1.GetOsNetCfg(webhookClient, r.GetNamespace(), r.GetLabels()[shared.OpenStackNetConfigReconcileLabel])
	if err != nil {
		return fmt.Errorf("error getting OpenStackNetConfig %s - %s: %w",
			r.GetLabels()[shared.OpenStackNetConfigReconcileLabel],
			r.Name,
			err)
	}

	//
	// validate that for all configured subnets an osnet exists
	//
	if err := ospdirectorv1beta1.ValidateNetworks(r.GetNamespace(), r.Spec.Networks); err != nil {
		return err
	}

	//
	// validate additional disks
	//
	if err := validateAdditionalDisks(r.Spec.AdditionalDisks, []OpenStackVMSetDisk{}); err != nil {
		return err
	}

	return r.validateCr()
}

// ValidateUpdate implements webhook.Validator so a webhook will be registered for the type
func (r *OpenStackVMSet) ValidateUpdate(old runtime.Object) error {
	vmsetlog.Info("validate update", "name", r.Name)

	// Get the OpenStackVMSet object
	var ok bool
	var oldInstance *OpenStackVMSet

	if oldInstance, ok = old.(*OpenStackVMSet); !ok {
		return fmt.Errorf("runtime object is not an OpenStackVMSet")
	}

	//
	// validate that for all configured subnets an osnet exists
	//
	if err := ospdirectorv1beta1.ValidateNetworks(r.GetNamespace(), r.Spec.Networks); err != nil {
		return err
	}

	//
	// validate rootdisk
	//
	if oldInstance.Spec.RootDisk.DiskSize > 0 {
		if err := validateRootDisk(r.Spec.RootDisk, oldInstance.Spec.RootDisk); err != nil {
			return err
		}
	}

	//
	// validate additional disks
	//
	if err := validateAdditionalDisks(r.Spec.AdditionalDisks, oldInstance.Spec.AdditionalDisks); err != nil {
		return err
	}

	return r.validateCr()
}

// ValidateDelete implements webhook.Validator so a webhook will be registered for the type
func (r *OpenStackVMSet) ValidateDelete() error {
	vmsetlog.Info("validate delete", "name", r.Name)

	return ospdirectorv1beta1.CheckBackupOperationBlocksAction(r.Namespace, shared.APIActionDelete)
}

func (r *OpenStackVMSet) validateCr() error {
	if err := checkRoleNameExists(r.TypeMeta, r.ObjectMeta, r.Spec.RoleName); err != nil {
		return err
	}

	return nil
}
